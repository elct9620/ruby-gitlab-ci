include:
  remote: https://github.com/elct9620/ruby-gitlab-ci/raw/main/common.yml#docker.yml

variables:
  DOCKER_BUILDX_VERSION: 0.8.2
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

.docker:base:
  extends: .docker
  variables:
    REVISION: $CI_COMMIT_SHORT_SHA
  script:
    - export DOCKER_TAG_OPTIONS="--tag ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG} --tag ${IMAGE_NAME}:${IMAGE_TAG}"
    - if [ "$LATEST_IMAGE" == "yes" ]; then export DOCKER_TAG_OPTIONS="--tag ${IMAGE_NAME}:latest ${DOCKER_TAG_OPTIONS}"; fi
    - docker buildx build
      --cache-from type=local,src=tmp/docker
      --cache-to type=local,dest=tmp/docker
      --build-arg REVISION=${REVISION}
      ${DOCKER_TAG_OPTIONS}
      --push .
  interruptible: true
  cache:
    key:
      files:
        - Gemfile.lock
      prefix: $CI_JOB_NAME
    paths:
      - tmp/docker

docker:
  extends: .docker:base
  stage: build
  retry:
    max: 1
  rules:
    - if: '$DOCKER_ENABLED == "yes" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        LATEST_IMAGE: 'yes'
    - if: '$DOCKER_ENABLED == "yes" && $CI_COMMIT_TAG'
      variables:
        REVISION: $CI_COMMIT_TAG
    - if: '$DOCKER_ENABLED == "yes"'

trivy:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  stage: scan
  variables:
    # Exclude built-in rubygems
    TRIVY_OPTIONS: --skip-dirs /usr/local/lib/ruby/gems
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    FULL_IMAGE_NAME: "$IMAGE_NAME:$IMAGE_TAG"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  cache:
    key: trivy-shared
    paths:
      - .trivycache/
  needs:
    - docker
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --skip-java-db-update --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 $TRIVY_OPTIONS --severity CRITICAL "$FULL_IMAGE_NAME"
  interruptible: true
  artifacts:
    when:
    reports:
      container_scanning: gl-container-scanning-report.json
  rules:
    - if: '$TRIVY_ENABLED == "yes" && $DOCKER_ENABLED == "yes"'
    - if: '$TRIVY_ENABLED == "yes" && $DOCKER_ENABLED == "yes" && $CI_COMMIT_TAG'
