include:
  - remote: https://github.com/elct9620/ruby-gitlab-ci/raw/main/ruby.yml
  - remote: https://github.com/elct9620/ruby-gitlab-ci/raw/main/javascript.yml
  - remote: https://github.com/elct9620/ruby-gitlab-ci/raw/main/docker.yml#rails.yml

variables:
  # Database
  POSTGRES_VERSION: 12-alpine
  POSTGRES_DB: application
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/$POSTGRES_DB"
  # Webdrivers
  WD_INSTALL_DIR: $CI_PROJECT_DIR/tmp/webdrivers
  BROWSER_REQUIRED: 'no'
  INSTALL_CHROME: 'yes'
  # SAST
  GITLAB_SECURITY_REGISTRY: registry.gitlab.com/security-products
  GITLAB_BRAKEMAN_VERSION: 3
  # Rails
  SECRET_KEY_BASE_DUMMY: 1

.rails:test:
  extends: .rails
  services:
    - "postgres:$POSTGRES_VERSION"
  variables:
    RAILS_ENV: test
  before_script:
    - !reference [.rails, before_script]
    - if [[ "$BROWSER_REQUIRED" == "yes" && "$INSTALL_CHROME" == "yes" ]]; then
      echo -e "\e[0Ksection_start:`date +%s`:setup_chrome[collapsed=true]\r\e[0KSetup Chrome"
      && curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
      && echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
      && apt-get update
      && apt-get install -y google-chrome-stable --no-install-recommends
      && echo -e "\e[0Ksection_end:`date +%s`:setup_chrome\r\e[0K";
      fi
    - echo -e "\e[0Ksection_start:`date +%s`:prepare_rails_test[collapsed=true]\r\e[0KPrepare Rails Test"
    - bundle exec rake db:migrate
    - bundle exec rake test:prepare || true
    - echo -e "\e[0Ksection_end:`date +%s`:prepare_rails_test\r\e[0K"

brakeman:
  image: $GITLAB_SECURITY_REGISTRY/brakeman:$GITLAB_BRAKEMAN_VERSION
  stage: lint
  script:
    - /analyzer run
  interruptible: true
  artifacts:
    reports:
      sast: gl-sast-report.json

rspec:
  extends: .rails:test

cucumber:
  extends: .rails:test

assets:precompile:
  extends: .rails
  stage: compile
  services:
    - "postgres:$POSTGRES_VERSION"
  variables:
    RAILS_ENV: production
  script:
    - RAILS_MASTER_KEY=${RAILS_PRODUCTION_KEY:-$RAILS_MASTER_KEY} bundle exec rails assets:precompile
  interruptible: true
  retry:
    max: 1
  artifacts:
    paths:
      - public/vite
      - public/packs
      - public/assets
  rules:
    - if: '$ASSETS_PRECOMPILE == "yes"'

assets:s3:
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  stage: deploy
  variables:
    # NOTE: The space will split by shell, avoid to use it
    S3_SYNC_OPTIONS: '--cache-control "public,max-age=31536000" --acl public-read'
    SE_SYNC_DELETE: 'no'
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:setup_s3[collapsed=true]\r\e[0KSetup S3 Options"
    - if [[ -v S3_ENDPOINT ]]; then export AWS_EXTRA_OPTIONS="${AWS_EXTRA_OPTIONS} --endpoint-url ${S3_ENDPOINT}"; fi
    - if [[ -v S3_ACCESS_KEY_ID ]]; then export AWS_ACCESS_KEY_ID=$S3_ACCESS_KEY_ID; fi
    - if [[ -v S3_SECRET_ACCESS_KEY ]]; then export AWS_SECRET_ACCESS_KEY=$S3_SECRET_ACCESS_KEY; fi
    - if [[ "$S3_SYNC_DELETE" == "yes" ]]; then export S3_SYNC_OPTIONS="$S3_SYNC_OPTIONS --delete"; fi
    - echo -e "\e[0Ksection_end:`date +%s`:setup_s3\r\e[0K"
  script:
    - aws $AWS_EXTRA_OPTIONS s3 sync ./public s3://$S3_BUCKET ${S3_SYNC_OPTIONS}
  needs:
    - job: assets:precompile
      artifacts: true
  rules:
    - if: '$ASSETS_PRECOMPILE == "yes" && $UPLOAD_TO_S3 == "yes"'
